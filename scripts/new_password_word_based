#!/usr/bin/env python

####################################################################################
# Copyright (c) 2015, Sean Perry <shaleh@speakeasy.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# Neither the name of the {organization} nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
####################################################################################


import argparse
import random
import string


class PasswordFailure(Exception):
    pass


def random_capital(word):
    n = random.choice(range(len(word)))
    return "".join(c.upper() if n == i else c for i, c in enumerate(word))


def new_password(length):
    with open('/usr/share/dict/words') as fp:
        lines = [ line.strip() for line in fp.readlines() ]
        words = {}
        for line in lines:
            if "'" in line:
                continue

            n = len(line)
            words.setdefault(n, []).append(line)

        part1 = random_capital(random.choice(words[length/2 - 1]))
        part2 = random_capital(random.choice(words[length/2 - 1]))
        glue = random.choice("!@#$%^&*")
        num = random.choice(string.digits)
        return part1 + glue + part2 + num


def run_new_password(password_length):
    result = new_password(password_length)
    return result


def main(arg_parser):
    args = arg_parser.parse_args()

    count = 0

    while True:
        count += 1

        result = run_new_password(args.password_length)
        if result:
            if args.verbose:
                print "{} tries required".format(count)

            return result


def check_password_length(input):
    try:
        length = int(input)
        if 8 <= length <= 64:
            return length
        raise argparse.ArgumentTypeError("{} is not within [8, 64]".format(input))
    except ValueError:
        raise argparse.ArgumentTypeError("{} is not a valid number".format(input))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Generate a new password following rules.")
    parser.add_argument('--verbose', action='store_true', help="be verbose")
    parser.add_argument('password_length', type=check_password_length,
                        help="how long does the password need to be?")

    print main(parser)
