#!/usr/bin/env python

####################################################################################
# Copyright (c) 2013, Sean Perry <shaleh@speakeasy.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# Neither the name of the {organization} nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
####################################################################################


import argparse
import hashlib
import operator
import os
import os.path
import shutil
import sys


class Archiver(object):
    archived_files = []
    extensions = []
    verbose = False

    def __init__(self, **kwargs):
        for kw in kwargs:
            setattr(self, kw, kwargs[kw])

    def __call__(self, arg, dirname, fnames):
        if self.verbose:
            print dirname

        for f in filter(os.path.isfile, [ os.path.join(dirname, fn) for fn in fnames ]):
            if self.verbose:
                print f

            if self.extensions:
                basename, ext = os.path.splitext(f)
                if ext and ext.lower() in self.extensions:
                    self.archive(f, arg)
            else:
                self.archive(f, arg)

    def archive(self, filename, destination_root):
        self.archived_files.append(filename)

    def statistics(self):
        return """
{}
Total: {}""".format(self.archived_files, len(archiver.archived_files))


def chunk_string(s, chunk_size):
    s_len = len(s)
    if s_len % chunk_size:
        raise ValueError("chunk size and input do not match")

    # if there would be N chunks, return N-1 of them
    return [ s[i:(i + chunk_size)] for i in range(0, s_len - chunk_size, chunk_size) ]


class HashArchiver(Archiver):
    archived_files = {}
    potential_conflicts = []

    def __init__(self, **kwargs):
        super(HashArchiver, self).__init__(**kwargs)

    def archive(self, filename, destination_root):
        digest = self.hasher(filename)
        chunks = chunk_string(digest, 4) if digest else ['', ]
        self.archive_file(filename, digest, [destination_root, ] + chunks, digest)

    def archive_file(self, source_filename, digest, dest_path, dest_filename):
        if digest in self.archived_files:
            if os.path.basename(self.archived_files[digest][0]) == os.path.basename(source_filename):
                self.archived_files[digest][2].append(source_filename)
            else:
                self.potential_conflicts.append((self.archived_files[digest][0], source_filename))

            return

        _, ext = os.path.splitext(source_filename)
        if ext:
            dest_filename = dest_filename + ext.lower()

        dest = os.path.join(*dest_path)
        final_filename = os.path.join(dest, dest_filename)

        if not self.dry_run:
            if os.path.exists(final_filename):
                print "{} already exists, skipping".format(final_filename)
                return

            if not os.path.isdir(dest):
                os.makedirs(dest)
            shutil.copyfile(source_filename, final_filename)
            shutil.copystat(source_filename, final_filename)

        self.archived_files[digest] = (source_filename, final_filename, [])

    def hasher(self, filename):
        try:
            with open(filename) as fp:
                h = hashlib.new('sha1', fp.read())
            return h.hexdigest()
        except:
            pass  # should do something here, maybe keep a list of failures and causes?

    def statistics(self):
        return """
Potential conflicts:
{}

Total processed: {}""".format("\n".join("{} & {}".format(*fs) for fs in self.potential_conflicts),
                              reduce(operator.add, [ len(files) + 1 for _, _, files in self.archived_files.values() ]))


def add_dot(s):
    if s[0] == '.':
        return s
    return '.' + s


def extensions_handler(input):
    if ',' in input or input[0].isalpha():
        return [ add_dot(s.strip()) for s in input.split(',') ]

    raise argparse.ArgumentTypeError("{} is not a valid extensions list.".format(input))


if __name__ == '__main__':
    import inspect

    known_archivers = { name: cls for name, cls in inspect.getmembers(sys.modules[__name__], inspect.isclass) \
                        if name.endswith('Archiver') }

    parser = argparse.ArgumentParser(description='Archive files by file hash.')
    parser.add_argument('--archiver', choices=known_archivers.keys(), default='Archiver',
                        help='Archiver type to use.')
    parser.add_argument('--dry-run', action='store_true', help='Dry run, just print actions.')
    parser.add_argument('--extensions', type=extensions_handler, help='Extensions to archive, comma separated.')
    parser.add_argument('--verbose', action='store_true', help='Verbose output')
    parser.add_argument('source', help='source path')
    parser.add_argument('destination', help='destination path')

    args = parser.parse_args()
    if args.dry_run:
        args.verbose = True  # makes no sense otherwise

    archiver_type = known_archivers[args.archiver]

    archiver = archiver_type(dry_run=args.dry_run, extensions=args.extensions, verbose=args.verbose)
    os.path.walk(args.source, archiver, args.destination)
    print archiver.statistics()
