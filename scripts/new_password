#!/usr/bin/env python

import random
import string


class PasswordFailure(Exception):
    pass


class ContainsItemPredicate(object):
    def __init__(self, allowed, failure):
        self.allowed = allowed
        self.failure = failure

    def __call__(self, word):
        return any(c in self.allowed for c in word)


class StartsWithLetterPredicate(object):
    allowed = ''
    failure = "Does not start with a letter"

    def __call__(self, word):
        return word[0] in string.ascii_letters


def follows_rules(rules, password):
    for rule in rules:
        if not rule(password):
            raise PasswordFailure(rule.failure)

    return True


def new_password(allowed, length):
    result = "".join(random.choice(allowed) for i in range(length))
    return result


def run_new_password(password_length, allowed, rules, verbose):
    try:
        result = new_password(allowed, password_length)
        follows_rules(rules, result)
        return result
    except PasswordFailure, e:
        if verbose:
            print e

    return None


if __name__ == '__main__':
    import argparse
    import sys

    parser = argparse.ArgumentParser(description='Generate a new password following rules.')
    parser.add_argument('--verbose', action='store_true', help='be verbose')
    parser.add_argument("--symbols", default='+!@#$&', help="allowed symbols")
    parser.add_argument('password_length', type=int, help='how long does the password need to be?')

    args = parser.parse_args()

    rules = [
        StartsWithLetterPredicate(),
        ContainsItemPredicate(string.ascii_letters, "Does not contain a letter"),
        ContainsItemPredicate(string.digits, "Does not contain a digit"),
        ContainsItemPredicate(args.symbols, "Does not contain a symbol"),
    ]

    allowed = ''.join(rule.allowed for rule in rules)

    count = 1

    while True:
        result = run_new_password(args.password_length, allowed, rules, verbose=args.verbose)
        if result:
            if args.verbose:
                print "%d tries required" % (count, )

            print result
            break

        count += 1
