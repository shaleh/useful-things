#!/usr/bin/env python

####################################################################################
# Copyright (c) 2013, Sean Perry <shaleh@speakeasy.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# Neither the name of the {organization} nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
####################################################################################


import argparse
from functools import wraps
import inspect
import random
import string
import sys


class PasswordFailure(Exception):
    pass


def predicate_function(allowed, failure):
    """Turns a function into a proper predicate by setting the ``allowed``,
    ``failure``, and ``is_predicate`` attributes."""
    def outer(func):
        @wraps(func)
        def inner(*args, **kwargs):
            return func(*args, **kwargs)
        inner.allowed = allowed
        inner.failure = failure
        inner.is_predicate = True
        return inner
    return outer


def predicate_class(allowed, failure):
    """Turns a class into a proper predicate by setting the ``allowed``,
 ``failure``, and ``is_predicate`` attributes."""
    def set_attributes(cls):
        cls.is_predicate = True
        cls.allowed = allowed
        cls.failure = failure
        return cls
    return set_attributes


class ContainsItemPredicateBase(object):
    def __call__(self, word):
        return any(c in self.allowed for c in word)


@predicate_class(string.ascii_letters, "Does not contain a letter")
class ContainsLetter(ContainsItemPredicateBase):
    pass


@predicate_class(string.digits, "Does not contain a number")
class ContainsNumber(ContainsItemPredicateBase):
    pass


class ContainsSymbol(ContainsItemPredicateBase):
    allowed = "+!@#$&"
    failure = "Does not contain a symbol"
    is_predicate = False


@predicate_function(None, "Does not start with a letter")
def startsWithLetter(word):
    return word[0] in string.ascii_letters


def follows_rules(rules, password):
    for rule in rules:
        if inspect.isclass(rule):
            rule = rule()

        if not rule(password):
            raise PasswordFailure(rule.failure)

    return True


def instantiate_rules():
    return [p for _, p in inspect.getmembers(sys.modules[__name__],
                                             lambda x: hasattr(x, 'is_predicate') and x.is_predicate)]


def new_password(allowed, length):
    result = "".join(random.choice(allowed) for i in range(length))
    return result


def run_new_password(password_length, allowed, rules, verbose):
    try:
        result = new_password(allowed, password_length)
        follows_rules(rules, result)
        return result
    except PasswordFailure, e:
        if verbose:
            print e

    return None


def main(arg_parser):
    args = arg_parser.parse_args()

    symbol_predicate = ContainsSymbol()
    symbol_predicate.allowed = args.symbols

    rules = instantiate_rules()

    if symbol_predicate.allowed:
        rules.append(symbol_predicate)

    allowed = ''.join([rule.allowed for rule in rules if rule.allowed])

    count = 0

    while True:
        count += 1

        result = run_new_password(args.password_length, allowed, rules, verbose=args.verbose)
        if result:
            if args.verbose:
                print "{} tries required".format(count)

            return result


def check_symbols(input):
    all_valid_symbols = "!@#$%^&*_+?"

    if all(c in all_valid_symbols for c in input):
        return input

    raise argparse.ArgumentTypeError("{} is not a valid list of symbols. Please use {}".format(input, all_valid_symbols))


def check_password_length(input):
    try:
        length = int(input)
        if 8 <= length <= 64:
            return length
        raise argparse.ArgumentTypeError("{} is not within [8, 64]".format(input))
    except ValueError:
        raise argparse.ArgumentTypeError("{} is not a valid number".format(input))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Generate a new password following rules.")
    parser.add_argument('--verbose', action='store_true', help="be verbose")
    parser.add_argument("--symbols", default=ContainsSymbol.allowed, type=check_symbols, help="allowed symbols")
    parser.add_argument('password_length', type=check_password_length, help="how long does the password need to be?")

    print main(parser)
